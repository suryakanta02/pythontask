import psycopg2

# Sample athlete data
ATHLETE_DATA = [
    {
        'athlete_id': 1,
        'name': 'John Doe',
        'age': 25,
        'test_date': '2025-07-01',
        'test_type': 'Sprint',
        'test_result': 11.2,
        'coach_comments': 'Strong performance'
    },
    {
        'athlete_id': 2,
        'name': 'Jane Smith',
        'age': 23,
        'test_date': '2025-07-01',
        'test_type': 'Endurance',
        'test_result': 8.5,
        'coach_comments': 'Needs improvement in pacing'
    }
]

def get_db_connection():
    """Create and return a PostgreSQL database connection."""
    try:
        conn = psycopg2.connect(
            host='localhost',
            database='skillslab',
            user='postgres',
            password='password',
            port='5432'
        )
        return conn
    except Exception as e:
        print(f"Error connecting to database: {e}")
        raise

def create_table(conn):
    """Create the athlete_tests table if it doesn't exist."""
    create_table_sql = """
    CREATE TABLE IF NOT EXISTS athlete_tests (
        athlete_id INTEGER PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        age INTEGER NOT NULL,
        test_date DATE NOT NULL,
        test_type VARCHAR(50) NOT NULL,
        test_result NUMERIC(10, 2) NOT NULL,
        coach_comments TEXT
    )
    """
    try:
        with conn.cursor() as cursor:
            cursor.execute(create_table_sql)
            conn.commit()
            print("Table created successfully")
    except Exception as e:
        conn.rollback()
        print(f"Error creating table: {e}")
        raise

def prepare_data():
    """Convert dictionary data to tuples in correct order for insertion."""
    prepared_data = []
    for athlete in ATHLETE_DATA:
        prepared_data.append((
            athlete['athlete_id'],
            athlete['name'],
            athlete['age'],
            athlete['test_date'],
            athlete['test_type'],
            athlete['test_result'],
            athlete['coach_comments']
        ))
    return prepared_data

def insert_data(conn, data):
    """Insert data directly into the athlete_tests table."""
    insert_sql = """
    INSERT INTO athlete_tests (
        athlete_id, name, age, test_date, test_type, test_result, coach_comments
    ) VALUES (%s, %s, %s, %s, %s, %s, %s)
    ON CONFLICT (athlete_id) DO NOTHING
    """
    try:
        with conn.cursor() as cursor:
            cursor.executemany(insert_sql, data)
            conn.commit()
            print(f"Successfully inserted {len(data)} records")
    except Exception as e:
        conn.rollback()
        print(f"Error inserting data: {e}")
        raise

def run_pipeline():
    """Run the complete data pipeline."""
    #abc = None
    try:
        abc = get_db_connection()
        create_table(abc)
        data = prepare_data()
        insert_data(abc, data)
    finally:
        if abc:
            abc.close()

def main():
    print("Starting athlete data pipeline...")
    run_pipeline()
    print("Pipeline execution completed.")

if __name__ == "__main__":
    main()